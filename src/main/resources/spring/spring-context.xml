<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd

	http://www.springframework.org/schema/data/mongo  
    http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd
            
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd

	http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.0.xsd

	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

<!--加载多个properties文件 -->
<bean id="propertyConfigurerForProject" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="order" value="1" />
    <property name="ignoreUnresolvablePlaceholders" value="true" />
    <property name="locations">
      <list>
        <value>classpath:/database/mysql.properties</value>
        <value>classpath:/redis/redis.properties</value>
        <value>classpath:/mongo/mongo.properties</value>
      </list>
    </property>
</bean>

<!--DBCP连接池的datasource -->
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="${db.driver}" />
    <property name="url" value="${db.url}" />
    <property name="username" value="${db.username}" />
    <property name="password" value="${db.password}" />
	<!-- 初始化连接大小 -->  
	<property name="initialSize" value="${db.initialSize}"></property>  
	<!-- 连接池最大数量,0时无限制 -->  
	<property name="maxActive" value="${db.maxActive}"></property>  
	<!-- 连接池最大空闲 -->  
	<property name="maxIdle" value="${db.maxIdle}"></property>  
	<!-- 连接池最小空闲 -->  
	<property name="minIdle" value="${db.minIdle}"></property>  
	<!-- 获取连接最大等待时间 -->  
	<property name="maxWait" value="${db.maxWait}"></property>  
    <!-- 是否对已备语句进行池管理（布尔值），是否对PreparedStatement进行缓存 -->
    <property name="poolPreparedStatements" value="true" />
    <!-- 是否对sql进行自动提交 -->
    <property name="defaultAutoCommit" value="true" />
</bean>

<!--Mybatis|SqlSessionFactory-->
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"></property>
    <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
    <property name="mapperLocations" value="classpath:com/shark/weipan/dao/mapper/*.xml"></property> <!-- 扫描映射文件 -->
</bean>

<!--Mybatis|Mapper映射支持-->
<!-- 可以把扫描到的Mapper接口变成Mapper对象 -->  
<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
    <property name="basePackage" value="com.shark.weipan.dao" />  <!-- 扫描Mapper接口 -->
	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
</bean>  

<!--Redis支持|简单--> 
<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <property name="maxIdle" value="${redis.maxIdle}" />  
        <property name="maxTotal" value="${redis.maxTotal}" />  
        <property name="MaxWaitMillis" value="${redis.MaxWaitMillis}" />  
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
</bean>
<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" 
p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}" p:pool-config-ref="poolConfig" />
<bean id="stringSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
<!-- 开启事务，可以通过transcational注解控制 -->
<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
    <property name="connectionFactory" ref="connectionFactory" />
    <property name="keySerializer" ref="stringSerializer" />
    <property name="enableTransactionSupport" value="true" />
</bean>    


<!--Mongodb3 -->  
<!-- mongodb 的基本配置 -->
<mongo:mongo id="mongo"  host="${mongo.host}" port="${mongo.port}"  />
<!-- 权限配置 -->
<bean id="userCredentials" class="org.springframework.data.authentication.UserCredentials">
    <constructor-arg name="username"  value="${mongo.username}"/>
    <constructor-arg name="password"  value="${mongo.password}"/>
</bean>
<!-- template 配置 -->
<bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
    <constructor-arg ref="mongo" />
    <!-- 数据库名称 -->
    <constructor-arg value="${mongo.database}" />
    <!-- 权限  -->
    <constructor-arg ref="userCredentials" />
</bean>

    










</beans>  

